// Generated by CoffeeScript 1.12.3

/*
jspsych-plane.coffee
Fred Callaway

An MDP mdp in which the participant plans flights to
maximize profit.
 */
var mdp,
  slice = [].slice,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

mdp = void 0;

jsPsych.plugins['graph'] = (function() {
  var Arrow, Edge, GraphMDP, KEYS, KEY_DESCRIPTION, LOG_DEBUG, LOG_INFO, NULL, PRINT, State, Text, add, angle, canvas, dist, plugin, polarMove, redGreen, round, size;
  PRINT = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  };
  NULL = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return null;
  };
  LOG_INFO = PRINT;
  LOG_DEBUG = PRINT;
  KEYS = _.mapObject({
    up: 'uparrow',
    down: 'downarrow'
  }, jsPsych.pluginAPI.convertKeyCharacterToKeyCode);
  KEY_DESCRIPTION = "Navigate with the up and down arrow keys.";
  size = void 0;
  canvas = void 0;
  fabric.Object.prototype.originX = fabric.Object.prototype.originY = 'center';
  fabric.Object.prototype.selectable = false;
  fabric.Object.prototype.hoverCursor = 'plain';
  angle = function(x1, y1, x2, y2) {
    var ang, x, y;
    x = x2 - x1;
    y = y2 - y1;
    if (x === 0) {
      ang = y === 0 ? 0 : y > 0 ? Math.PI / 2 : Math.PI * 3 / 2;
    } else if (y === 0) {
      ang = x > 0 ? 0 : Math.PI;
    } else {
      ang = x < 0 ? Math.atan(y / x) + Math.PI : y < 0 ? Math.atan(y / x) + 2 * Math.PI : Math.atan(y / x);
    }
    return ang + Math.PI / 2;
  };
  polarMove = function(x, y, ang, dist) {
    x += dist * Math.sin(ang);
    y -= dist * Math.cos(ang);
    return [x, y];
  };
  add = function(obj) {
    canvas.add(obj);
    return obj;
  };
  dist = function(o1, o2) {
    return Math.pow(Math.pow(o1.left - o2.left, 2) + Math.pow(o1.top - o2.top, 2), 0.5);
  };
  redGreen = function(val) {
    if (val > 0) {
      return '#080';
    } else if (val < 0) {
      return '#b00';
    } else {
      return '#888';
    }
  };
  round = function(x) {
    return (Math.round(x * 100)) / 100;
  };
  GraphMDP = (function() {
    function GraphMDP(config) {
      this.checkFinished = bind(this.checkFinished, this);
      this.endTrial = bind(this.endTrial, this);
      this.addStars = bind(this.addStars, this);
      this.addScore = bind(this.addScore, this);
      this.buildMap = bind(this.buildMap, this);
      this.initPlayer = bind(this.initPlayer, this);
      this.run = bind(this.run, this);
      this.arrive = bind(this.arrive, this);
      this.handleClick = bind(this.handleClick, this);
      this.handleKey = bind(this.handleKey, this);
      var _json, lowerMessage, ref, ref1, ref2, ref3, ref4, ref5, trial;
      this.display = config.display, this._block = config._block, this.graph = config.graph, this.initial = config.initial, this.width = config.width, this.depth = config.depth, this.pr_freq = config.pr_freq, this.returns = (ref = config.returns) != null ? ref : null, this.pseudo = (ref1 = config.pseudo) != null ? ref1 : null, this.trialID = (ref2 = config.trialID) != null ? ref2 : null, this.keys = (ref3 = config.keys) != null ? ref3 : KEYS, this.playerImage = (ref4 = config.playerImage) != null ? ref4 : 'static/images/plane.png', trial = config.trial, _json = config._json, lowerMessage = (ref5 = config.lowerMessage) != null ? ref5 : KEY_DESCRIPTION;
      checkObj(this);
      console.log('returns', this.returns);
      this.invKeys = _.invert(this.keys);
      this.data = {
        trial: trial,
        env: _json,
        pseudo_rewards: this.pseudo._json,
        pr_freq: this.pr_freq,
        returns: this.returns,
        trialID: this.trialID,
        trialIndex: this._block.trialCount,
        score: 0,
        stars: 0,
        rewards: [],
        prs: [],
        path: [],
        rt: [],
        actions: [],
        actionTimes: []
      };
      this.trialCounter = $('<div>', {
        id: 'graph-msg-left',
        "class": 'graph-header',
        html: "Trial: " + (this._block.trialCount + 1) + " / " + this._block.timeline.length
      }).appendTo(this.display);
      this.message = $('<div>', {
        id: 'graph-msg-center',
        "class": 'graph-header',
        html: '<span id=graph-stars/>'
      }).appendTo(this.display);
      this.addStars(null);
      this.scoreCounter = $('<div>', {
        id: 'graph-msg-right',
        "class": 'graph-header',
        html: 'Profit: <span id=graph-score/>'
      }).appendTo(this.display);
      this.addScore(null);
      this.canvas = $('<canvas>', {
        id: 'graph-canvas'
      }).attr({
        width: 500,
        height: 500
      }).appendTo(this.display);
      this.lowerMessage = $('<div>', {
        id: 'graph-msg-bottom',
        html: lowerMessage || '&nbsp'
      }).css({
        'padding-top': '30px'
      }).appendTo(this.display);
      mdp = this;
      LOG_INFO('new GraphMDP', this);
    }

    GraphMDP.prototype.handleKey = function(s0, a) {
      var r, ref, s1, s1g;
      LOG_DEBUG('handleKey', s0, a);
      this.data.actions.push(a);
      this.data.actionTimes.push(Date.now() - this.initTime);
      ref = this.graph[s0][a], s1 = ref[0], r = ref[1];
      this.addScore(r);
      s1g = this.states[s1];
      return this.player.animate({
        left: s1g.left,
        top: s1g.top
      }, {
        duration: dist(this.player, s0) * 4,
        onChange: canvas.renderAll.bind(canvas),
        onComplete: (function(_this) {
          return function() {
            return _this.arrive(s1);
          };
        })(this)
      });
    };

    GraphMDP.prototype.handleClick = function(s) {};

    GraphMDP.prototype.arrive = function(s) {
      var a, keys;
      LOG_DEBUG('arrive', s);
      this.data.path.push(s);
      this.updatePseudo(s);
      keys = (function() {
        var i, len, ref, results;
        ref = Object.keys(this.graph[s]);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          a = ref[i];
          results.push(this.keys[a]);
        }
        return results;
      }).call(this);
      if (!keys.length) {
        this.complete = true;
        this.checkFinished();
        return;
      }
      return this.keyListener = jsPsych.pluginAPI.getKeyboardResponse({
        valid_responses: keys,
        rt_method: 'date',
        persist: false,
        allow_held_key: false,
        callback_function: (function(_this) {
          return function(info) {
            var action;
            action = _this.invKeys[info.key];
            LOG_DEBUG('key', info.key);
            _this.data.rt.push(info.rt);
            return _this.handleKey(s, action);
          };
        })(this)
      });
    };

    GraphMDP.prototype.updatePseudo = function(s) {
      var name, pr, pseudo, ref, state;
      if (!this.pseudo) {
        return;
      }
      if (this.nextPseudo != null) {
        pr = this.nextPseudo[s];
        if (pr != null) {
          this.addStars(pr);
        } else {
          return;
        }
      }
      this.nextPseudo = {};
      pseudo = this.pseudo[s];
      ref = this.states;
      for (name in ref) {
        state = ref[name];
        pr = pseudo[name];
        if (pr != null) {
          this.nextPseudo[name] = pr;
          if (pr !== 0) {
            state.setLabel(pr);
          } else {
            state.setLabel('');
          }
        } else {
          state.setLabel('');
        }
      }
      return canvas.renderAll();
    };

    GraphMDP.prototype.run = function() {
      LOG_DEBUG('run');
      this.buildMap();
      return fabric.Image.fromURL(this.playerImage, ((function(_this) {
        return function(img) {
          _this.initPlayer(img);
          _this.initTime = Date.now();
          return _this.arrive(_this.initial);
        };
      })(this)));
    };

    GraphMDP.prototype.initPlayer = function(img) {
      var left, top;
      LOG_DEBUG('initPlayer');
      top = this.states[this.initial].top;
      left = this.states[this.initial].left;
      img.scale(0.3);
      img.set('top', top).set('left', left);
      add(img);
      img.set('top', top).set('left', left);
      canvas.renderAll();
      return this.player = img;
    };

    GraphMDP.prototype.buildMap = function() {
      var action, choices, height, locate, ref, ref1, ref2, results, reward, s, s0, s1, width, x, y;
      LOG_DEBUG('buildMap');
      locate = function(s) {
        var adj, d, ref, w;
        ref = s.split('_'), d = ref[0], w = ref[1];
        d = parseInt(d);
        w = parseInt(w);
        adj = d % 2 ? 0.5 : 0;
        return [d, w - adj + 0.5];
      };
      size = 120;
      width = this.depth * size;
      height = (this.width + .5) * size;
      this.canvas.attr({
        width: width,
        height: height
      });
      canvas = new fabric.Canvas('graph-canvas', {
        selection: false
      });
      this.states = {};
      ref = this.graph;
      for (s in ref) {
        choices = ref[s];
        ref1 = locate(s), x = ref1[0], y = ref1[1];
        this.states[s] = add(new State(s, x, y));
      }
      ref2 = this.graph;
      results = [];
      for (s0 in ref2) {
        choices = ref2[s0];
        results.push((function() {
          var ref3, results1;
          results1 = [];
          for (action in choices) {
            ref3 = choices[action], s1 = ref3[0], reward = ref3[1];
            results1.push(add(new Edge(this.states[s0], this.states[s1], {
              reward: reward
            })));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    GraphMDP.prototype.addScore = function(v) {
      if (v != null) {
        this.data.rewards.push(v);
        this.data.score = round(this.data.score + v);
      }
      $('#graph-score').html('$' + this.data.score);
      return $('#graph-score').css('color', redGreen(this.data.score));
    };

    GraphMDP.prototype.addStars = function(v) {
      if (v != null) {
        this.data.stars += v;
        this.data.prs.push(v);
      }
      return $('#graph-stars').html(this.data.stars + '⭐');
    };

    GraphMDP.prototype.endTrial = function() {
      this.lowerMessage.html("<b>Press any key to continue.</br>");
      return this.keyListener = jsPsych.pluginAPI.getKeyboardResponse({
        valid_responses: [],
        rt_method: 'date',
        persist: false,
        allow_held_key: false,
        callback_function: (function(_this) {
          return function(info) {
            _this.display.empty();
            return jsPsych.finishTrial(_this.data);
          };
        })(this)
      });
    };

    GraphMDP.prototype.checkFinished = function() {
      if (this.complete) {
        return this.endTrial();
      }
    };

    return GraphMDP;

  })();
  State = (function(superClass) {
    extend(State, superClass);

    function State(name1, left, top, config) {
      var conf;
      this.name = name1;
      if (config == null) {
        config = {};
      }
      left = (left + .5) * size;
      top = (top + .7) * size;
      conf = {
        left: left,
        top: top,
        fill: '#bbbbbb',
        radius: size / 4,
        label: ''
      };
      _.extend(conf, config);
      this.on('mousedown', (function(_this) {
        return function() {
          return mdp.handleClick(_this.name);
        };
      })(this));
      this.circle = new fabric.Circle(conf);
      this.label = new Text(conf.label, left, top, {
        fontSize: size / 6,
        fill: '#44d'
      });
      this.radius = this.circle.radius;
      this.left = this.circle.left;
      this.top = this.circle.top;
      State.__super__.constructor.call(this, [this.circle, this.label]);
    }

    State.prototype.setLabel = function(txt) {
      if (txt) {
        this.label.setText(txt + '⭐');
        this.label.setFill(redGreen(txt));
      } else {
        this.label.setText('');
      }
      return this.dirty = true;
    };

    return State;

  })(fabric.Group);
  Edge = (function(superClass) {
    extend(Edge, superClass);

    function Edge(c1, c2, conf) {
      var adjX, adjY, ang, labX, labY, label2, pseudo, ref, ref1, ref2, ref3, ref4, ref5, ref6, reward, spacing, txt, x1, x2, y1, y2;
      if (conf == null) {
        conf = {};
      }
      reward = conf.reward, pseudo = (ref = conf.pseudo) != null ? ref : null, label2 = (ref1 = conf.label2) != null ? ref1 : '', spacing = (ref2 = conf.spacing) != null ? ref2 : 8, adjX = (ref3 = conf.adjX) != null ? ref3 : 0, adjY = (ref4 = conf.adjY) != null ? ref4 : 0;
      ref5 = [c1.left + adjX, c1.top + adjY, c2.left + adjX, c2.top + adjY], x1 = ref5[0], y1 = ref5[1], x2 = ref5[2], y2 = ref5[3];
      this.arrow = new Arrow(x1, y1, x2, y2, c1.radius + spacing, c2.radius + spacing);
      ang = (this.arrow.ang + Math.PI / 2) % (Math.PI * 2);
      if ((0.5 * Math.PI <= ang && ang <= 1.5 * Math.PI)) {
        ang += Math.PI;
      }
      ref6 = polarMove(x1, y1, angle(x1, y1, x2, y2), size * 0.5), labX = ref6[0], labY = ref6[1];
      txt = "$" + reward;
      this.label = new Text(txt, labX, labY, {
        angle: ang * 180 / Math.PI,
        fill: redGreen(reward),
        fontSize: size / 6,
        textBackgroundColor: 'white'
      });
      Edge.__super__.constructor.call(this, [this.arrow, this.label]);
    }

    return Edge;

  })(fabric.Group);
  Arrow = (function(superClass) {
    extend(Arrow, superClass);

    function Arrow(x1, y1, x2, y2, adj1, adj2) {
      var ang, deltaX, deltaY, dx, dy, line, point, ref, ref1;
      if (adj1 == null) {
        adj1 = 0;
      }
      if (adj2 == null) {
        adj2 = 0;
      }
      this.ang = ang = angle(x1, y1, x2, y2);
      ref = polarMove(x1, y1, ang, adj1), x1 = ref[0], y1 = ref[1];
      ref1 = polarMove(x2, y2, ang, -(adj2 + 7.5)), x2 = ref1[0], y2 = ref1[1];
      line = new fabric.Line([x1, y1, x2, y2], {
        stroke: '#555',
        selectable: false,
        strokeWidth: 3
      });
      this.centerX = (x1 + x2) / 2;
      this.centerY = (y1 + y2) / 2;
      deltaX = line.left - this.centerX;
      deltaY = line.top - this.centerY;
      dx = x2 - x1;
      dy = y2 - y1;
      point = new fabric.Triangle({
        left: x2 + deltaX,
        top: y2 + deltaY,
        pointType: 'arrow_start',
        angle: ang * 180 / Math.PI,
        width: 10,
        height: 10,
        fill: '#555'
      });
      Arrow.__super__.constructor.call(this, [line, point]);
    }

    return Arrow;

  })(fabric.Group);
  Text = (function(superClass) {
    extend(Text, superClass);

    function Text(txt, left, top, config) {
      var conf;
      txt = String(txt);
      conf = {
        left: left,
        top: top,
        fontFamily: 'helvetica',
        fontSize: size / 8
      };
      _.extend(conf, config);
      Text.__super__.constructor.call(this, txt, conf);
    }

    return Text;

  })(fabric.Text);
  plugin = {
    trial: function(display_element, trialConfig) {
      var trial;
      trialConfig = jsPsych.pluginAPI.evaluateFunctionParameters(trialConfig);
      trialConfig['display'] = display_element;
      _.extend(trialConfig, trialConfig.env);
      console.log('trialConfig', trialConfig);
      display_element.empty();
      trial = new GraphMDP(trialConfig);
      trial.run();
      return trialConfig._block.trialCount += 1;
    }
  };
  return plugin;
})();
