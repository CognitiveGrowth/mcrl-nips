clear;

load ../results/2lightbulb_problem.mat
Q_star_2 = nlightbulb_mdp.Q_star;
S_2 = nlightbulb_mdp.states;
T_2 = nlightbulb_mdp.T;
R_2 = nlightbulb_mdp.R;
load ../results/nlightbulb_problem.mat

%%
nSims = 1000;
epsilon     = 0.25;  % probability of a random action selection

for n = 2:4
    disp(num2str(n))
    switch n
        case 2
            load ../results/2lightbulb_fit.mat
            Q_hat = nlightbulb_problem.Q_hat_BSARSA;
            Q_star = Q_star_2;
            S = S_2;
            T = T_2;
            R = R_2;
        case 3
            load ../results/nlightbulb_fit.mat
            Q_hat = nlightbulb_problem.Q_hat_BSARSA;
            Q_star = nlightbulb_mdp(1).Q_star;
            S = nlightbulb_mdp(1).states;
            T = nlightbulb_mdp(1).T;
            R = nlightbulb_mdp(1).R;
        case 4
            load ../results/4lightbulb_fit.mat
            Q_hat = nlightbulb_problem.Q_hat_BSARSA;
            Q_star = nlightbulb_mdp(2).Q_star;
            S = nlightbulb_mdp(2).states;
            T = nlightbulb_mdp(2).T;
            R = nlightbulb_mdp(2).R;
        case 5
            load ../results/5lightbulb_fit.mat
            Q_hat = nlightbulb_problem.Q_hat_BSARSA;
            Q_star = nlightbulb_mdp(3).Q_star;
            S = nlightbulb_mdp(3).states;
            T = nlightbulb_mdp(3).T;
            R = nlightbulb_mdp(3).R;
    end
    nActions = size(T,3);
    nStates = size(T,1);
    ER = nan(nSims,1);
    for p = 1:2
        if p == 1
            Q = Q_star;
        else
            Q = Q_hat;
        end
    for i = 1:nSims
        if ~rem(i,100),disp(num2str(i));end
        s = 1;
        r_cum = 0;
        while true
            if (rand()>epsilon)
                [~,a] = sort(Q(s,:),'descend');
                a = a(1);
            else
                a = randi(nActions);
            end
            r_cum = r_cum + R(s,a);
            if a == nActions
                break
            end
            s = randsample(nStates,1,true,T(s,:,a));
        end
        ER(i) = r_cum;
    end
    ER_m(n-1,p) = mean(ER);
    ER_s(n-1,p) = sem(ER);
    end
end
%%


figure; hold on;
bar(ER_m)

set(gca,'xtick',1:3,'xticklabel',{'2','3','4'})
xlabel('num. bandits','fontsize',18)
ylabel('expected return','fontsize',18)
legend('optimal policy','approximate policy')
% plot(mean(R_noPR),'k')
% plot(mean(R_aprxPR),'b')
% plot(mean(R_optPR),'r')
% plot(mean(R_optPi),'g')
% plot([1 nEpisodes],[mean(R_optPi),mean(R_optPi)],'g--','linewidth',2)
h = errorbar(smooth(mean(R_noPR),20),smooth(sem(R_noPR),20),'k'); h.CapSize = 0;
h = errorbar(smooth(mean(R_aprxPR),20),smooth(sem(R_aprxPR),20),'b'); h.CapSize = 0;
h = errorbar(smooth(mean(R_optPR),20),smooth(sem(R_optPR),20),'r'); h.CapSize = 0;
h = errorbar(smooth(mean(R_optPi),20),smooth(sem(R_optPi),20),'g'); h.CapSize = 0;
legend('no PRs','approximate PRs','optimal PRs','optimal policy','location','southeast')
xlabel('learning episode','fontsize',18)
ylabel('reward','fontsize',18)
saveas(gcf,['../results/figures/',num2str(n),'lightbulb_simulations_',num2str(nEpisodes),'Episodes'],'png');