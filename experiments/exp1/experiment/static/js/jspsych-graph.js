// Generated by CoffeeScript 1.12.3

/*
jspsych-plane.coffee
Fred Callaway

An MDP mdp in which the participant plans flights to
maximize profit.
 */
var mdp,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

mdp = void 0;

jsPsych.plugins['graph'] = (function() {
  var Arrow, Edge, GREEN, GraphMDP, KEYS, KEY_DESCRIPTION, RED, State, Text, add, angle, canvas, dist, plugin, polarMove, redGreen, round, size;
  KEYS = _.mapObject({
    up: 'uparrow',
    down: 'downarrow',
    right: 'rightarrow',
    left: 'leftarrow'
  }, jsPsych.pluginAPI.convertKeyCharacterToKeyCode);
  KEY_DESCRIPTION = "Navigate with the arrow keys.";
  RED = '#b00';
  GREEN = '#080';
  size = void 0;
  canvas = void 0;
  fabric.Object.prototype.originX = fabric.Object.prototype.originY = 'center';
  fabric.Object.prototype.selectable = false;
  fabric.Object.prototype.hoverCursor = 'plain';
  angle = function(x1, y1, x2, y2) {
    var ang, x, y;
    x = x2 - x1;
    y = y2 - y1;
    if (x === 0) {
      ang = y === 0 ? 0 : y > 0 ? Math.PI / 2 : Math.PI * 3 / 2;
    } else if (y === 0) {
      ang = x > 0 ? 0 : Math.PI;
    } else {
      ang = x < 0 ? Math.atan(y / x) + Math.PI : y < 0 ? Math.atan(y / x) + 2 * Math.PI : Math.atan(y / x);
    }
    return ang + Math.PI / 2;
  };
  polarMove = function(x, y, ang, dist) {
    x += dist * Math.sin(ang);
    y -= dist * Math.cos(ang);
    return [x, y];
  };
  add = function(obj) {
    canvas.add(obj);
    return obj;
  };
  dist = function(o1, o2) {
    return Math.pow(Math.pow(o1.left - o2.left, 2) + Math.pow(o1.top - o2.top, 2), 0.5);
  };
  redGreen = function(val) {
    if (val > 0) {
      return GREEN;
    } else if (val < 0) {
      return RED;
    } else {
      return '#777';
    }
  };
  round = function(x) {
    return (Math.round(x * 100)) / 100;
  };
  GraphMDP = (function() {
    function GraphMDP(config) {
      this.displayFeedback = bind(this.displayFeedback, this);
      this.checkFinished = bind(this.checkFinished, this);
      this.endTrial = bind(this.endTrial, this);
      this.addScore = bind(this.addScore, this);
      this.buildMap = bind(this.buildMap, this);
      this.initPlayer = bind(this.initPlayer, this);
      this.startTimer = bind(this.startTimer, this);
      this.run = bind(this.run, this);
      this.arrive = bind(this.arrive, this);
      this.click = bind(this.click, this);
      this.act = bind(this.act, this);
      var lowerMessage, ref, ref1, ref2, ref3, ref4, ref5;
      this.display = config.display, this.block = config.block, this.graph = config.graph, this.initialState = config.initialState, this.trialID = config.trialID, this.feedback = (ref = config.feedback) != null ? ref : true, this.infoCost = (ref1 = config.infoCost) != null ? ref1 : PARAMS.info_cost, this.keys = (ref2 = config.keys) != null ? ref2 : KEYS, this.playerImage = (ref3 = config.playerImage) != null ? ref3 : '/static/images/plane.png', this.minTime = (ref4 = config.minTime) != null ? ref4 : (DEBUG ? 5 : 45), lowerMessage = (ref5 = config.lowerMessage) != null ? ref5 : KEY_DESCRIPTION;
      meta_MDP.init(this.trialID);
      this.invKeys = _.invert(this.keys);
      this.data = {
        minTime: this.minTime,
        infoCost: this.infoCost,
        trialID: this.trialID,
        trialIndex: this.block.trialCount,
        score: 0,
        path: [],
        rt: [],
        actions: [],
        clicks: [],
        actionTimes: [],
        clickTimes: [],
        delays: [],
        condition: condition,
        feedback: this.feedback
      };
      this.nMoves = 0;
      this.trialCounter = $('<div>', {
        id: 'graph-msg-left',
        "class": 'graph-header',
        html: "Round: " + this.block.trialCount + " / " + this.block.timeline.length
      }).appendTo(this.display);
      this.message = $('<div>', {
        id: 'graph-msg-center',
        "class": 'graph-header',
        html: 'Time: <span id=graph-time/>'
      }).appendTo(this.display);
      this.scoreCounter = $('<div>', {
        id: 'graph-msg-right',
        "class": 'graph-header',
        html: 'Profit: <span id=graph-score/>'
      }).appendTo(this.display);
      this.canvas = $('<canvas>', {
        id: 'graph-canvas'
      }).attr({
        width: 500,
        height: 500
      }).appendTo(this.display);
      this.lowerMessage = $('<div>', {
        id: 'graph-msg-bottom',
        html: lowerMessage || '&nbsp'
      }).appendTo(this.display);
      $('#jspsych-target').append("<div id=\"graph-feedback\" class=\"modal\">\n  <div id=\"graph-feedback-content\" class=\"modal-content\">\n    <h3>Default</h3>\n  </div>\n</div>");
      mdp = this;
      checkObj(this);
      console.log('new GraphMDP', this);
    }

    GraphMDP.prototype.act = function(s0, a) {
      var _, r, result, s1, s1g;
      this.nMoves += 1;
      if (this.freeze) {
        return;
      }
      this.data.actions.push(a);
      this.data.actionTimes.push(Date.now() - this.initTime);
      result = this.graph[s0].actions[a];
      s1 = result[0], _ = result[1];
      r = this.graph[s1].reward;
      this.addScore(r);
      s1g = this.states[s1];
      return this.player.animate({
        left: s1g.left,
        top: s1g.top
      }, {
        duration: dist(this.player, s0) * 4,
        onChange: canvas.renderAll.bind(canvas),
        onComplete: (function(_this) {
          return function() {
            return _this.displayFeedback(a, s1);
          };
        })(this)
      });
    };

    GraphMDP.prototype.click = function(s) {
      if (this.freeze) {
        return;
      }
      if (s === "1" || indexOf.call(this.data.clicks, s) >= 0) {
        return;
      }
      this.data.clicks.push(s);
      this.data.clickTimes.push(Date.now() - this.initTime);
      this.addScore(-this.infoCost);
      this.states[s].setLabel(this.graph[s].reward);
      return registerClick(parseInt(s));
    };

    GraphMDP.prototype.arrive = function(s) {
      var a, keys;
      this.data.path.push(s);
      keys = (function() {
        var i, len, ref, results;
        ref = Object.keys(this.graph[s]['actions']);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          a = ref[i];
          results.push(this.keys[a]);
        }
        return results;
      }).call(this);
      console.log('arrive', s, keys);
      if (!keys.length) {
        this.complete = true;
        this.checkFinished();
        return;
      }
      return this.keyListener = jsPsych.pluginAPI.getKeyboardResponse({
        valid_responses: keys,
        rt_method: 'date',
        persist: false,
        allow_held_key: false,
        callback_function: (function(_this) {
          return function(info) {
            var action;
            action = _this.invKeys[info.key];
            _this.data.rt.push(info.rt);
            return _this.act(s, action);
          };
        })(this)
      });
    };

    GraphMDP.prototype.run = function() {
      this.nMoves = 0;
      this.buildMap();
      return fabric.Image.fromURL(this.playerImage, ((function(_this) {
        return function(img) {
          _this.startTimer();
          _this.initPlayer(img);
          _this.initTime = Date.now();
          return _this.arrive(_this.initialState);
        };
      })(this)));
    };

    GraphMDP.prototype.startTimer = function() {
      var intervalID, tick;
      this.timeLeft = this.minTime;
      intervalID = void 0;
      tick = (function(_this) {
        return function() {
          if (_this.freeze) {
            return;
          }
          _this.timeLeft -= 1;
          $('#graph-time').html(_this.timeLeft);
          $('#graph-time').css('color', redGreen(-_this.timeLeft + .1));
          if (_this.timeLeft === 0) {
            window.clearInterval(intervalID);
            return _this.checkFinished();
          }
        };
      })(this);
      $('#graph-time').html(this.timeLeft);
      $('#graph-time').css('color', redGreen(-this.timeLeft + .1));
      return intervalID = window.setInterval(tick, 1000);
    };

    GraphMDP.prototype.initPlayer = function(img) {
      var left, top;
      top = this.states[this.initialState].top;
      left = this.states[this.initialState].left;
      img.scale(0.35);
      img.set('top', top).set('left', left);
      add(img);
      img.set('top', top).set('left', left);
      canvas.renderAll();
      return this.player = img;
    };

    GraphMDP.prototype.buildMap = function() {
      var a, actions, height, location, name, ref, ref1, results, reward, s0, s1, width, x, y;
      size = 120;
      width = 5 * size;
      height = 5 * size;
      this.canvas.attr({
        width: width,
        height: height
      });
      canvas = new fabric.Canvas('graph-canvas', {
        selection: false
      });
      this.states = {};
      ref = this.graph;
      for (name in ref) {
        location = ref[name].location;
        x = location[0], y = location[1];
        this.states[name] = add(new State(name, x, y, {
          fill: name === '1' ? '#fff' : '#bbb'
        }));
      }
      ref1 = this.graph;
      results = [];
      for (s0 in ref1) {
        actions = ref1[s0].actions;
        results.push((function() {
          var ref2, results1;
          results1 = [];
          for (a in actions) {
            ref2 = actions[a], s1 = ref2[0], reward = ref2[1];
            results1.push(add(new Edge(this.states[s0], this.states[s1])));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    GraphMDP.prototype.addScore = function(v) {
      this.data.score = round(this.data.score + v);
      $('#graph-score').html('$' + this.data.score.toFixed(2));
      return $('#graph-score').css('color', redGreen(this.data.score));
    };

    GraphMDP.prototype.endTrial = function() {
      this.lowerMessage.html("Press any key to continue.<br>");
      return this.keyListener = jsPsych.pluginAPI.getKeyboardResponse({
        valid_responses: [],
        rt_method: 'date',
        persist: false,
        allow_held_key: false,
        callback_function: (function(_this) {
          return function(info) {
            _this.display.empty();
            return jsPsych.finishTrial(_this.data);
          };
        })(this)
      });
    };

    GraphMDP.prototype.checkFinished = function() {
      if (this.complete && this.timeLeft > 0) {
        this.lowerMessage.html("Waiting for the timer to expire...");
      }
      if (this.complete && this.timeLeft <= 0) {
        return this.endTrial();
      }
    };

    GraphMDP.prototype.displayFeedback = function(a, s1) {
      var feedback, head, info, msg, penalty, redGreenSpan, result;
      feedback = registerMove(a);
      console.log('feedback', feedback);
      if (PARAMS.PR_type) {
        result = {
          delay: Math.round(feedback.delay),
          planned_too_little: feedback.planned_too_little,
          planned_too_much: feedback.planned_too_much,
          information_used_correctly: feedback.information_used_correctly
        };
      } else {
        result = {
          delay: (function() {
            switch (this.nMoves) {
              case 1:
                return 8;
              case 2:
                return 0;
              case 3:
                return 1;
            }
          }).call(this)
        };
      }
      this.data.delays.push(result.delay);
      redGreenSpan = function(txt, val) {
        return "<span style='color: " + (redGreen(val)) + "; font-weight: bold;'>" + txt + "</span>";
      };
      if (PARAMS.PR_type) {
        head = (function() {
          if (PARAMS.smart_message) {
            if (result.planned_too_little) {
              if (!result.planned_too_much) {
                return redGreenSpan("You should have gathered more information!", -1);
              } else {
                return redGreenSpan("You gathered too little relevant and too much irrelevant information!", -1);
              }
            } else {
              if (result.planned_too_much) {
                return redGreenSpan("You considered irrelevant outcomes.", -1);
              } else {
                return redGreenSpan("You gathered enough information!", 1);
              }
            }
          } else {
            return redGreenSpan("Poor planning!", -1);
          }
        })();
        penalty = result.delay ? "<p>" + result.delay + " second penalty</p>" : void 0;
        info = (function() {
          if (PARAMS.smart_message) {
            return "Given the information you collected, your decision was " + (result.information_used_correctly ? redGreenSpan('optimal.', 1) : redGreenSpan('suboptimal.', -1));
          } else {
            return '';
          }
        })();
        msg = "<h3>" + head + "</h3>\n<b>" + penalty + "</b>\n" + info;
      } else {
        msg = "Please wait " + result.delay + " seconds.";
      }
      if (this.feedback && result.delay >= 2) {
        this.freeze = true;
        $('#graph-feedback').css({
          display: 'block'
        });
        $('#graph-feedback-content').html(msg);
        return setTimeout(((function(_this) {
          return function() {
            _this.freeze = false;
            $('#graph-feedback').css({
              display: 'none'
            });
            return _this.arrive(s1);
          };
        })(this)), (DEBUG ? 1000 : result.delay * 1000));
      } else {
        $('#graph-feedback').css({
          display: 'none'
        });
        return this.arrive(s1);
      }
    };

    return GraphMDP;

  })();
  State = (function(superClass) {
    extend(State, superClass);

    function State(name1, left, top, config) {
      var conf;
      this.name = name1;
      if (config == null) {
        config = {};
      }
      left = (left + .5) * size;
      top = (top + .7) * size;
      conf = {
        left: left,
        top: top,
        fill: '#bbbbbb',
        radius: size / 3.8,
        hoverCursor: 'pointer',
        label: ''
      };
      _.extend(conf, config);
      this.on('mousedown', function() {
        return mdp.click(this.name);
      });
      this.circle = new fabric.Circle(conf);
      this.label = new Text(conf.label, left, top, {
        fontSize: 20,
        fill: '#44d'
      });
      this.radius = this.circle.radius;
      this.left = this.circle.left;
      this.top = this.circle.top;
      State.__super__.constructor.call(this, [this.circle, this.label]);
    }

    State.prototype.setLabel = function(txt) {
      this.label.setText('$' + txt);
      this.label.setFill(redGreen(txt));
      return this.dirty = true;
    };

    return State;

  })(fabric.Group);
  Edge = (function(superClass) {
    extend(Edge, superClass);

    function Edge(c1, c2, conf) {
      var adjX, adjY, label2, pseudo, ref, ref1, ref2, ref3, ref4, ref5, ref6, reward, spacing, x1, x2, y1, y2;
      if (conf == null) {
        conf = {};
      }
      reward = (ref = conf.reward) != null ? ref : 0, pseudo = (ref1 = conf.pseudo) != null ? ref1 : null, label2 = (ref2 = conf.label2) != null ? ref2 : '', spacing = (ref3 = conf.spacing) != null ? ref3 : 8, adjX = (ref4 = conf.adjX) != null ? ref4 : 0, adjY = (ref5 = conf.adjY) != null ? ref5 : 0;
      ref6 = [c1.left + adjX, c1.top + adjY, c2.left + adjX, c2.top + adjY], x1 = ref6[0], y1 = ref6[1], x2 = ref6[2], y2 = ref6[3];
      this.arrow = new Arrow(x1, y1, x2, y2, c1.radius + spacing, c2.radius + spacing);
      Edge.__super__.constructor.call(this, [this.arrow]);
    }

    return Edge;

  })(fabric.Group);
  Arrow = (function(superClass) {
    extend(Arrow, superClass);

    function Arrow(x1, y1, x2, y2, adj1, adj2) {
      var ang, deltaX, deltaY, dx, dy, line, point, ref, ref1;
      if (adj1 == null) {
        adj1 = 0;
      }
      if (adj2 == null) {
        adj2 = 0;
      }
      this.ang = ang = angle(x1, y1, x2, y2);
      ref = polarMove(x1, y1, ang, adj1), x1 = ref[0], y1 = ref[1];
      ref1 = polarMove(x2, y2, ang, -(adj2 + 7.5)), x2 = ref1[0], y2 = ref1[1];
      line = new fabric.Line([x1, y1, x2, y2], {
        stroke: '#000',
        selectable: false,
        strokeWidth: 3
      });
      this.centerX = (x1 + x2) / 2;
      this.centerY = (y1 + y2) / 2;
      deltaX = line.left - this.centerX;
      deltaY = line.top - this.centerY;
      dx = x2 - x1;
      dy = y2 - y1;
      point = new fabric.Triangle({
        left: x2 + deltaX,
        top: y2 + deltaY,
        pointType: 'arrow_start',
        angle: ang * 180 / Math.PI,
        width: 10,
        height: 10,
        fill: '#000'
      });
      Arrow.__super__.constructor.call(this, [line, point]);
    }

    return Arrow;

  })(fabric.Group);
  Text = (function(superClass) {
    extend(Text, superClass);

    function Text(txt, left, top, config) {
      var conf;
      txt = String(txt);
      conf = {
        left: left,
        top: top,
        fontFamily: 'helvetica',
        fontSize: 14
      };
      _.extend(conf, config);
      Text.__super__.constructor.call(this, txt, conf);
    }

    return Text;

  })(fabric.Text);
  plugin = {
    trial: function(display_element, trial_config) {
      var trial;
      display_element.empty();
      trial_config = jsPsych.pluginAPI.evaluateFunctionParameters(trial_config);
      trial_config['display'] = display_element;
      trial_config.block.trialCount += 1;
      trial = new GraphMDP(trial_config);
      return trial.run();
    }
  };
  return plugin;
})();
