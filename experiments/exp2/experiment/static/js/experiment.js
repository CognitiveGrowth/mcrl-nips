// Generated by CoffeeScript 1.12.3

/*
experiment.coffee
Fred Callaway

Demonstrates the jsych-mdp plugin
 */
var BLOCKS, DEBUG, DEMO, PARAMS, condition, counterbalance, createStartButton, delay, initializeExperiment, psiturk,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DEBUG = true;

if (DEBUG) {
  console.log("X X X X X X X X X X X X X X X X X\n X X X X X DEBUG  MODE X X X X X\nX X X X X X X X X X X X X X X X X");
  condition = 0;
} else {
  console.log("# =============================== #\n# ========= NORMAL MODE ========= #\n# =============================== #");
}

if (mode === "{{ mode }}") {
  DEMO = true;
  condition = 0;
  counterbalance = 0;
}

psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

BLOCKS = void 0;

PARAMS = void 0;

delay = function(time, func) {
  return setTimeout(func, time);
};

$(window).on('load', function() {
  var loadTimeout, slowLoad;
  slowLoad = function() {
    return document.getElementById("failLoad").style.display = "block";
  };
  loadTimeout = delay(12000, slowLoad);
  psiturk.preloadImages(['static/images/example1.png', 'static/images/example2.png', 'static/images/example3.png', 'static/images/money.png', 'static/images/plane.png', 'static/images/spider.png']);
  return delay(300, function() {
    var ERROR, expData;
    console.log('Loading data');
    expData = deepLoadJson("static/json/condition_" + condition + "_" + counterbalance + ".json");
    console.log('expData', expData);
    PARAMS = expData.params;
    PARAMS.bonus_rate = .1;
    PARAMS.start_time = Date(Date.now());
    BLOCKS = expData.blocks;
    psiturk.recordUnstructuredData('params', PARAMS);
    if (DEBUG || DEMO) {
      createStartButton();
      return PARAMS.message = true;
    } else {
      console.log('Testing saveData');
      ERROR = null;
      return psiturk.saveData({
        error: function() {
          console.log('ERROR saving data.');
          return ERROR = true;
        },
        success: function() {
          console.log('Data saved to psiturk server.');
          clearTimeout(loadTimeout);
          return delay(500, createStartButton);
        }
      });
    }
  });
});

createStartButton = function() {
  if (DEBUG) {
    initializeExperiment();
    return;
  }
  document.getElementById("loader").style.display = "none";
  document.getElementById("successLoad").style.display = "block";
  document.getElementById("failLoad").style.display = "none";
  return $('#load-btn').click(initializeExperiment);
};

initializeExperiment = function() {
  var BONUS, Block, GraphBlock, N_TRIAL, QuizLoop, TextBlock, calculateBonus, experiment_timeline, finish, img, instruct_loop, instructions, main, prompt_resubmit, quiz, reprompt, save_data, text;
  console.log('INITIALIZE EXPERIMENT');
  N_TRIAL = BLOCKS.standard.length;
  text = {
    debug: function() {
      if (DEBUG) {
        return "`DEBUG`";
      } else {
        return '';
      }
    },
    pseudo: function() {
      switch (PARAMS.pseudo_f) {
        case 'full':
          return "The number of stars on a circle indicates the maximum amount of money\nyou can earn if you pass through that circle.";
        case 'value':
          return "The number of stars on a circle indicates the maximum amount of money\nyou can earn starting from that circle.";
      }
    }
  };
  Block = (function() {
    function Block(config) {
      _.extend(this, config);
      this._block = this;
      if (this._init != null) {
        this._init();
      }
    }

    return Block;

  })();
  TextBlock = (function(superClass) {
    extend(TextBlock, superClass);

    function TextBlock() {
      return TextBlock.__super__.constructor.apply(this, arguments);
    }

    TextBlock.prototype.type = 'text';

    TextBlock.prototype.cont_key = ['space'];

    return TextBlock;

  })(Block);
  QuizLoop = (function(superClass) {
    extend(QuizLoop, superClass);

    function QuizLoop() {
      return QuizLoop.__super__.constructor.apply(this, arguments);
    }

    QuizLoop.prototype.loop_function = function(data) {
      var c, i, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          return true;
        }
      }
      return false;
    };

    return QuizLoop;

  })(Block);
  GraphBlock = (function(superClass) {
    extend(GraphBlock, superClass);

    function GraphBlock() {
      return GraphBlock.__super__.constructor.apply(this, arguments);
    }

    GraphBlock.prototype.type = 'mouselab-mdp';

    GraphBlock.prototype.playerImage = 'static/images/spider.png';

    GraphBlock.prototype._init = function() {
      return this.trialCount = 0;
    };

    return GraphBlock;

  })(Block);
  img = function(name) {
    return "<img class='display' src='static/images/" + name + ".png'/>";
  };
  instructions = new Block({
    type: "instructions",
    pages: function() {
      return [markdown("# Introduction\n\nIn this HIT, you will play a game called *Web of Cash*. You will guide\na money-loving spider through a spider web, gaining or losing money\nfor every move you make. Your goal is to maximize the profit for each\nround. Note the direction of the arrows: You can only travel right,\nnever left. For each move, you can decide whether to go up or down.\n\n" + (img('example1')) + "\n"), markdown("# Bonus Pay\n\nTo make things more exciting, you will earn **real money** based on\nhow well you do in the game. After you complete all " + N_TRIAL + " rounds,\nwe will calculate the average profit you made on all the trials. Your bonus\nwill be " + (PARAMS.bonus_rate * 100) + "% of that amount, up to\na maximum of **$2.30**!\n\n\n" + (img('money'))), markdown("# Inspecting the Web\n\nIn the previous example, the money you would make by crossing each\narrow was shown on the arrow. However, in the real game, these numbers\nwill not be shown when the round starts! Fortunately, **you can reveal the value of\nan arrow by clicking on it.**\n\n" + (img('example2')) + "\n"), markdown("# Helpful Stars\n\nIn some rounds, some circles will have stars on them. **You can click on\nthose circles to reveal the number of stars**. These stars provide\ninformation that can **help you earn more money!** " + (text.pseudo()) + "\nFor example: in the image below, you can earn $18 starting from the\nposition circled in blue by following the path indicated by the purple\ncircles.\n\n" + (img('example3'))), markdown("# In case of technical difficulties\n\nWe've tried our best to prevent any glitches, but no one's perfect! If\nsomething goes wrong during the experiment, you can always email\nfredcallaway@berkeley.edu. However, the fastest way to get reimbursed for\nyour time is to fill out the following form. We suggest you copy down\nthe URL now, just in case. Please include a short description of what\nhappened and where you were in the experiment (e.g. what round number)\nThanks!\n\nhttps://goo.gl/forms/CW0cAKyOHipFGXZE2"), markdown("# Quiz\n\nNext up is a short quiz to confirm that you understand how to play\n*Web of Cash*. If you get any questions wrong, you'll be sent back to\nthe instructions to review before taking the quiz again. Good luck!")];
    },
    show_clickable_nav: true
  });
  quiz = new Block({
    type: 'survey-multi-choice',
    preamble: function() {
      return markdown("# Quiz");
    },
    questions: ["What will your bonus be based on?", "What does it mean for a location to have 7 stars on it?", "What does it mean when there is a question mark on an arrow?"],
    options: [['Profit', 'Stars', 'Both profit and stars'], ['You will receive $70 for visiting that location', 'You can earn a maximum of $7 after visiting that location', 'You can earn a maximum of $7 in the entire round if you visit that location'], ['You will receive no money for crossing that arrow', 'You will receive a random amount of money for crossing that arrow', 'You can click on the question mark to reveal the value of that arrow']],
    required: [true, true, true],
    correct: ['Profit', 'You can earn a maximum of $7 after visiting that location', 'You can click on the question mark to reveal the value of that arrow'],
    on_mistake: function(data) {
      return alert("You got at least one question wrong. We'll send you back to review\nthe instructions; then you can try again.");
    }
  });
  instruct_loop = new Block({
    timeline: [instructions, quiz],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[1].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          return true;
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    }
  });
  main = new GraphBlock({
    timeline: BLOCKS.standard
  });
  finish = new Block({
    type: 'button-response',
    stimulus: function() {
      return markdown("# You've completed the HIT\n\nThanks again for participating. We hope you had fun!\n\nBased on your performance, you will be\nawarded a bonus of **$" + (calculateBonus().toFixed(2)) + "**.");
    },
    is_html: true,
    choices: ['Submit hit'],
    button_html: '<button class="btn btn-primary btn-lg">%choice%</button>'
  });
  if (DEBUG) {
    experiment_timeline = [main, finish];
  } else {
    experiment_timeline = [instruct_loop, main, finish];
  }
  BONUS = void 0;
  calculateBonus = function() {
    var bonus, data;
    if (BONUS != null) {
      return BONUS;
    }
    data = jsPsych.data.getTrialsOfType('mouselab-mdp');
    bonus = mean(_.pluck(data, 'score'));
    bonus = (Math.round(bonus * 100)) / 100;
    BONUS = (Math.max(0, bonus)) * PARAMS.bonus_rate;
    psiturk.recordUnstructuredData('final_bonus', BONUS);
    return BONUS;
  };
  reprompt = null;
  save_data = function() {
    return psiturk.saveData({
      success: function() {
        console.log('Data saved to psiturk server.');
        if (reprompt != null) {
          window.clearInterval(reprompt);
        }
        return psiturk.computeBonus('compute_bonus', psiturk.completeHIT);
      },
      error: function() {
        return prompt_resubmit;
      }
    });
  };
  prompt_resubmit = function() {
    $('#jspsych-target').html("<h1>Oops!</h1>\n<p>\nSomething went wrong submitting your HIT.\nThis might happen if you lose your internet connection.\nPress the button to resubmit.\n</p>\n<button id=\"resubmit\">Resubmit</button>");
    return $('#resubmit').click(function() {
      $('#jspsych-target').html('Trying to resubmit...');
      reprompt = window.setTimeout(prompt_resubmit, 10000);
      return save_data();
    });
  };
  return jsPsych.init({
    display_element: $('#jspsych-target'),
    timeline: experiment_timeline,
    on_finish: function() {
      if (DEBUG) {
        return jsPsych.data.displayData();
      } else {
        psiturk.recordUnstructuredData('final_bonus', calculateBonus());
        return save_data();
      }
    },
    on_data_update: function(data) {
      console.log('data', data);
      return psiturk.recordTrialData(data);
    }
  });
};
